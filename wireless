#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
 
int trig = D1;
int echo = D2;
int duration;
float distance;
BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
unsigned long previousMillis = 0;
const long interval = 1000;
 
// DSP Variables
const int numReadings = 10;
float readings[numReadings];
int readIndex = 0;
float total = 0;
float average = 0;
 
#define SERVICE_UUID        "8734cffb-24bd-4985-a522-f0233c507d0f"
#define CHARACTERISTIC_UUID "5e2002d9-ca94-40ed-a2eb-0223fe08408a"
 
class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        deviceConnected = true;
    };
 
    void onDisconnect(BLEServer* pServer) {
        deviceConnected = false;
    }
};
 
void setup() {
    Serial.begin(115200);
    Serial.println("Starting BLE work!");
 
    pinMode(trig, OUTPUT);
    digitalWrite(trig, LOW);
    delayMicroseconds(2);
    pinMode(echo, INPUT);
 
    // Initialize DSP variables
    for (int i = 0; i < numReadings; i++) {
        readings[i] = 0;
    }
 
    BLEDevice::init("Team18ESP32");
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());
    BLEService *pService = pServer->createService(SERVICE_UUID);
    pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE |
                      BLECharacteristic::PROPERTY_NOTIFY);
    pCharacteristic->addDescriptor(new BLE2902());
    pCharacteristic->setValue("Hello World");
    pService->start();
 
    BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(SERVICE_UUID);
    pAdvertising->setScanResponse(true);
    pAdvertising->setMinPreferred(0x06);
    pAdvertising->setMinPreferred(0x12);
    BLEDevice::startAdvertising();
    Serial.println("Characteristic defined! Now you can read it in your phone!");
}
 
void addReading(float newReading) {
    total -= readings[readIndex];
    readings[readIndex] = newReading;
    total += readings[readIndex];
    readIndex = (readIndex + 1) % numReadings;
    average = total / numReadings;
}
 
void loop() {
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);
    duration = pulseIn(echo, HIGH);
 
    if (duration >= 38000) {
        Serial.println("Out of range");
    } else {
        distance = duration / 58.0;
        addReading(distance);
        Serial.print("Raw Distance: ");
        Serial.print(distance);
        Serial.print(" cm, Denoised Distance: ");
        Serial.print(average);
        Serial.println(" cm");
 
        if (deviceConnected && average < 30) {
            unsigned long currentMillis = millis();
            if (currentMillis - previousMillis >= interval) {
                char buffer[32];
                snprintf(buffer, sizeof(buffer), "Distance: %.2f cm", average);
                pCharacteristic->setValue(buffer);
                pCharacteristic->notify();
                Serial.print("Notify value: ");
                Serial.println(buffer);
 
                previousMillis = currentMillis;
            }
        }
    }
 
    if (!deviceConnected && oldDeviceConnected) {
        delay(500);
        pServer->startAdvertising();
        Serial.println("Start advertising");
        oldDeviceConnected = deviceConnected;
    }
 
    if (deviceConnected && !oldDeviceConnected) {
        oldDeviceConnected = deviceConnected;
    }
 
    delay(1000);
}
 
